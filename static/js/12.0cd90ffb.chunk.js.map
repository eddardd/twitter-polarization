{"version":3,"sources":["components/HierarchicalEdge/index.js"],"names":["HierarchicalEdge","id","node","parent","data","name","useEffect","colorin","colorout","orientationTypeScale","d3","domain","range","root","delimiter","map","Map","forEach","find","has","get","i","lastIndexOf","set","substring","children","push","hierarchy","mydata","line","curve","beta","radius","d","y","angle","x","width","size","Math","PI","tree","leaves","incoming","outgoing","imports","o","f","bilink","sort","a","b","height","svg","attr","append","selectAll","join","text","each","this","on","event","link","style","path","raise","call","length","flatMap","leaf"],"mappings":"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","file":"static/js/12.0cd90ffb.chunk.js","sourcesContent":["import React, { useEffect } from 'react';\nimport * as d3 from 'd3';\n\nimport mydata from '../../assets/hierarchical_graph.json';\n\nfunction HierarchicalEdge() {\n  function id(node) {\n    return `${node.parent ? id(node.parent) + '.' : ''}${node.data.name}`;\n  }\n\n  function hierarchy(data, delimiter = '.') {\n    let root;\n    const map = new Map();\n    data.forEach(function find(data) {\n      const { name } = data;\n      if (map.has(name)) return map.get(name);\n      const i = name.lastIndexOf(delimiter);\n      map.set(name, data);\n      if (i >= 0) {\n        find({ name: name.substring(0, i), children: [] }).children.push(data);\n        data.name = name.substring(i + 1);\n      } else {\n        root = data;\n      }\n      return data;\n    });\n    return root;\n  }\n\n  useEffect(() => {\n    const colorin = '#00f';\n    const colornone = '#ccc';\n    const colorout = '#f00';\n    const orientationTypeScale = d3\n      .scaleOrdinal()\n      .domain(['Esquerda', 'Direita', 'Centro'])\n      .range(['#941c1c', '#1a219c', '#9c8e19']);\n\n    const data = hierarchy(mydata);\n\n    const line = d3\n      .lineRadial()\n      .curve(d3.curveBundle.beta(0.85))\n      .radius((d) => d.y)\n      .angle((d) => d.x);\n\n    const width = 954;\n    const radius = width / 2;\n    const tree = d3.cluster().size([2 * Math.PI, radius - 100]);\n\n    function bilink(root) {\n      const map = new Map(root.leaves().map((d) => [id(d), d]));\n      for (const d of root.leaves())\n        (d.incoming = []),\n          (d.outgoing = d.data.imports.map((i) => [d, map.get(i)]));\n      for (const d of root.leaves())\n        for (const o of d.outgoing) o[1].incoming.push(o);\n      return root;\n    }\n\n    const root = tree(\n      bilink(\n        d3\n          .hierarchy(data)\n          .sort(\n            (a, b) =>\n              d3.ascending(a.height, b.height) ||\n              d3.ascending(a.data.name, b.data.name),\n          ),\n      ),\n    );\n\n    const svg = d3\n      .select('#hierarchical')\n      .attr('viewBox', [-width / 2, -width / 2, width, width]);\n\n    function overed(event, d) {\n      link.style('mix-blend-mode', null);\n      d3.select(this).attr('font-weight', 'bold');\n      d3.selectAll(event.incoming.map((d) => d.path))\n        .attr('stroke', colorin)\n        .raise();\n      d3.selectAll(event.incoming.map(([d]) => d.text))\n        .attr('fill', colorin)\n        .attr('font-weight', 'bold');\n      d3.selectAll(event.outgoing.map((d) => d.path))\n        .attr('stroke', colorout)\n        .raise();\n      d3.selectAll(event.outgoing.map(([, d]) => d.text))\n        .attr('fill', colorout)\n        .attr('font-weight', 'bold');\n    }\n\n    function outed(event, d) {\n      link.style('mix-blend-mode', 'multiply');\n      d3.select(this).attr('font-weight', null);\n      d3.selectAll(event.incoming.map((d) => d.path)).attr('stroke', null);\n      d3.selectAll(event.incoming.map(([d]) => d.text))\n        .attr('fill', null)\n        .attr('font-weight', null);\n      d3.selectAll(event.outgoing.map((d) => d.path)).attr('stroke', null);\n      d3.selectAll(event.outgoing.map(([, d]) => d.text))\n        .attr('fill', null)\n        .attr('font-weight', null);\n    }\n\n    const node = svg\n      .append('g')\n      .attr('font-family', 'sans-serif')\n      .attr('font-size', 10)\n      .selectAll('g')\n      .data(root.leaves())\n      .join('g')\n      .attr(\n        'transform',\n        (d) => `rotate(${(d.x * 180) / Math.PI - 90}) translate(${d.y},0)`,\n      )\n      .append('text')\n      .attr('dy', '0.31em')\n      .attr('x', (d) => (d.x < Math.PI ? 6 : -6))\n      .attr('text-anchor', (d) => (d.x < Math.PI ? 'start' : 'end'))\n      .attr('transform', (d) => (d.x >= Math.PI ? 'rotate(180)' : null))\n      .text((d) => d.data.name)\n      .attr('fill', (d) => orientationTypeScale(d.data['Orientação']))\n      .each(function (d) {\n        d.text = this;\n      })\n      .on('mouseover', overed)\n      .on('mouseout', outed)\n      .call((text) =>\n        text.append('title').text(\n          (d) => `${d.data.name}\n${d.outgoing.length} outgoing\n${d.incoming.length} incoming`,\n        ),\n      );\n\n    const link = svg\n      .append('g')\n      .attr('stroke', colornone)\n      .attr('fill', 'none')\n      .selectAll('path')\n      .data(root.leaves().flatMap((leaf) => leaf.outgoing))\n      .join('path')\n      .style('mix-blend-mode', 'multiply')\n      .attr('d', ([i, o]) => line(i.path(o)))\n      .each(function (d) {\n        d.path = this;\n      });\n  }, []);\n\n  return (\n    <>\n      <svg id=\"hierarchical\"></svg>\n    </>\n  );\n}\n\nexport default HierarchicalEdge;\n"],"sourceRoot":""}